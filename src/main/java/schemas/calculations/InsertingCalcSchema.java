package schemas.calculations;

import bot.Bot;
import model.VisitorChat;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import utils.Keyboards;
import schemas.Schema;
import schemas.Schemas;
import utils.Size;

import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class InsertingCalcSchema implements Schema {
    static Map<String, Integer> fillingData = new HashMap<>();
    static {
        fillingData.put(Schemas.foamFilling, 200);
        fillingData.put(Schemas.canvasFilling, 800);
        fillingData.put(Schemas.glassFilling, 300);
        fillingData.put(Schemas.passFilling, 400);
    }

    @Override
    public SendMessage run(Message inMess) {
        var chat = Bot.chatMap.get(inMess.getChatId().toString());
        chat.clearCalcData();
        var sendMessage = new SendMessage();
        sendMessage.setText("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ —Å–º  \uD83D\uDCCF");
        sendMessage.setReplyMarkup(Keyboards.calcKb());
        return sendMessage;
    }

    @Override
    public SendMessage reply(Message inMess) {
        var sendMessage = new SendMessage();
        var message = inMess.getText();
        var chatId = inMess.getChatId().toString();
        var chat = Bot.chatMap.get(chatId);
        var sideA = chat.getSideA();
        var sideB = chat.getSideB();
        var fillings = chat.getFillings();

        //if info button was pressed
        if (message.equals(Schemas.info)) {
            sendMessage.setText("""
                    - –í–≤–µ–¥–∏—Ç–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Ä–∞–∑–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã:
                    –∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 120 —Å–º ‚òë\uFE0F
                    –∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 80 —Å–º ‚òë\uFE0F
                    - –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ üìù
                    - –ù–∞–∂–º–∏—Ç–µ –≥–æ—Ç–æ–≤–æ ‚úÖ
                    
                    """
                    + getSideOrder(sideA, sideB));
            sendMessage.setReplyMarkup(Keyboards.calcKb());
        }
        //checking if CANCEL was pressed
        else if (message.equals(Schemas.cancel)) {
            chat.clearCalcData();
            sendMessage.setText("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ —Å–º  \uD83D\uDCCF");
            sendMessage.setReplyMarkup(Keyboards.calcKb());
        }
        //if they entered text instead of a number
        else if (!isIntParsable(message) && (sideA == null || sideB == null)) {
            sendMessage.setText("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ \uD83D\uDD22" + "\n" + getSideOrder(sideA,sideB));
            sendMessage.setReplyMarkup(Keyboards.calcKb());
        }
        //setting side A
        else if (sideA == null) {
            chat.setSideA(Integer.parseInt(message));
            sendMessage.setText("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ —Å–º  \uD83D\uDCD0");
            sendMessage.setReplyMarkup(Keyboards.calcKb());

        }
        //setting side B
        else if (sideB == null) {
            chat.setSideB(Integer.parseInt(message));
            sendMessage.setText("""
                    –í—ã–±–µ—Ä–µ—Ç–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ
                    —Å–æ—Å—Ç–∞–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ".
                    """);
            sendMessage.setReplyMarkup(Keyboards.calcFillingKb());
        }
        //if they choose fillings
        else if (fillingData.containsKey(message)) {
            chat.addFilling(message);
            sendMessage.setText(String.format("""
                    –ë—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ç–∞–∫–æ–π –≤–∏–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: %s.
                    –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å "–ì–æ—Ç–æ–≤–æ".
                    """, message.toUpperCase()));
            sendMessage.setReplyMarkup(Keyboards.calcFillingKb());
        }
        //if they are done with choosing
        else if (message.equals(Schemas.done)) {
            if (fillings.isEmpty()) {
                sendMessage.setText("""
                    –í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏!".
                    –í—ã–±–µ—Ä–µ—Ç–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ
                    —Å–æ—Å—Ç–∞–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ".
                    """);
                sendMessage.setReplyMarkup(Keyboards.calcFillingKb());
            } else {
                sendMessage.setText(calculate(chat));
                sendMessage.setReplyMarkup(Keyboards.calcKb());
                chat.clearCalcData();
            }
        }
        return sendMessage;
    }

    private String calculate(VisitorChat chat) {
        var length = Math.max(chat.getSideA(), chat.getSideB());
        var width = Math.min(chat.getSideA(), chat.getSideB());
        var square = (float) length * width / 10_000;
        float finalCalculation = 0;
        var additionalInfo = "";
        for (var filling : chat.getFillings()) {
            finalCalculation += fillingData.get(filling) * square;
        }

        if (square < Size.XS.getValue()) {
            var coefficient = 20;
            finalCalculation *= coefficient;
            additionalInfo = String
                    .format("(–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–º–Ω–æ–∂–µ–Ω–∞ –Ω–∞ %d, —Ç–∞–∫ –∫–∞–∫ –ø–ª–æ—â–∞–¥—å —Ä–∞–±–æ—Ç—ã –º–µ–Ω—å—à–µ %f –º.–∫–≤.)",
                            coefficient,
                            Size.XS.getValue());
        } else if (square < Size.S.getValue()) {
            var coefficient = 5;
            finalCalculation *= coefficient;
            additionalInfo = String
                    .format("(–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–º–Ω–æ–∂–µ–Ω–∞ –Ω–∞ %d, —Ç–∞–∫ –∫–∞–∫ –ø–ª–æ—â–∞–¥—å —Ä–∞–±–æ—Ç—ã –º–µ–Ω—å—à–µ %f –º.–∫–≤.)",
                            coefficient,
                            Size.S.getValue());
        } else if (square < Size.XM.getValue()) {
            var coefficient = 2;
            finalCalculation *= coefficient;
            additionalInfo = String
                    .format("(–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–º–Ω–æ–∂–µ–Ω–∞ –Ω–∞ %d, —Ç–∞–∫ –∫–∞–∫ –ø–ª–æ—â–∞–¥—å —Ä–∞–±–æ—Ç—ã –º–µ–Ω—å—à–µ %f –º.–∫–≤.)",
                            coefficient,
                            Size.XM.getValue());
        }

        return String.format("""
                –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã,
                —Ä–∞–∑–º–µ—Ä–∞–º–∏ %d—Å–º –Ω–∞ %d—Å–º, —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %d —Ä—É–±.
                –°—é–¥–∞ –≤—Ö–æ–¥–∏—Ç —Ä–∞–±–æ—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: %s.
                """ + "\n" + additionalInfo,
                chat.getSideA(),
                chat.getSideB(),
                Math.round(finalCalculation),
                chat.getFillings().stream().map(fil -> {
                    var costPerSquare = fillingData.get(fil);
                    var actualCost = square * costPerSquare;
                    return fil + "(" + (int) actualCost + "—Ä—É–±)";
                }).collect(Collectors.joining(", "))) + "\n"
                + "–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç, –≤–≤–µ–¥—è –ø–µ—Ä–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É \uD83D\uDE09";
    }

    private boolean isIntParsable(String text) {
        try {
            Integer.parseInt(text);
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

    private String getSideOrder(Integer a, Integer b) {
        if (a == null && b == null) {
            return "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ —Å–º  \uD83D\uDCCF";
        } else if (b == null) {
            return "–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ —Å–º  \uD83D\uDCD0";
        }
        return "–í–∏–¥–∏–º–æ, –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤–≤–µ–¥–µ–Ω—ã \uD83E\uDD37\uD83C\uDFFC\u200D‚ôÇ\uFE0F";
    }

    @Override
    public String getVideoPath() {
        return null;
    }

    @Override
    public String getPhotoPath(String message) {
        return null;
    }
}
